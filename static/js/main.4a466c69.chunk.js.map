{"version":3,"sources":["component/logTable/index.module.css","component/logTable/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LogTable","props","className","styles","logTableBox","logTableHead","logTableRow","names","logTableCol","col1","col2","col3","col4","col5","logTableBody","style","display","alignItems","format","ticking","timezone","selected","value","padding","content","intent","logTableFoot","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a466c69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logTableBox\":\"logTable_logTableBox__3GTqs\",\"logTableCol\":\"logTable_logTableCol__2AejC\",\"logTableHead\":\"logTable_logTableHead__c5icS\",\"logTableRow\":\"logTable_logTableRow__1vgIm\",\"logTableBody\":\"logTable_logTableBody__1Tzdm\",\"col1\":\"logTable_col1__iuXDb\",\"col2\":\"logTable_col2__22-e4\",\"col3\":\"logTable_col3__3HTqL\",\"col4\":\"logTable_col4__a6J3c\",\"col5\":\"logTable_col5__2bRlx\"};","import React from 'react';\nimport { Tag, Tooltip, InputGroup } from '@blueprintjs/core';\nimport Clock from 'react-live-clock';\nimport names from 'classnames';\n\nimport styles from './index.module.css';\n\nexport default function LogTable(props) {\n    return (\n        <div className={styles.logTableBox}>\n            <div className={styles.logTableHead}>\n                <div className={styles.logTableRow}>\n                    <div className={names(styles.logTableCol, styles.col1)}>#</div>\n                    <div className={names(styles.logTableCol, styles.col2)}>Time</div>\n                    <div className={names(styles.logTableCol, styles.col3)}>Logger</div>\n                    <div className={names(styles.logTableCol, styles.col4)}>Level</div>\n                    <div className={names(styles.logTableCol, styles.col5)}>Message</div>\n                </div>\n            </div>\n            <div className={styles.logTableBody}>\n                <div className={styles.logTableRow}>\n                    <div className={names(styles.logTableCol, styles.col1)}>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col2)}>\n                        <Clock className=\"bp3-monospace-text\" style={{ display: 'flex', alignItems: 'center' }} format={'HH:mm:ss'} ticking={true} timezone={'US/Pacific'} />\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col3)}>\n                        <div className=\"bp3-select\">\n                            <select>\n                                <option selected>Choose Logger</option>\n                                <option value=\"1\">One</option>\n                                <option value=\"2\">Two</option>\n                                <option value=\"3\">Three</option>\n                                <option value=\"4\">Four</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col4)}>\n                        <div className=\"bp3-select\">\n                            <select>\n                                <option selected>Choose Level</option>\n                                <option value=\"1\">One</option>\n                                <option value=\"2\">Two</option>\n                                <option value=\"3\">Three</option>\n                                <option value=\"4\">Four</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col5)}>\n                        <div style={{ padding: '0 6px' }}>\n                            <InputGroup />\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.logTableRow}>\n                    <div className={names(styles.logTableCol, styles.col1)}>1</div>\n                    <div className={names(styles.logTableCol, styles.col2)}>\n                        <Tooltip content=\"2020.01.11 12:50\">1 minutes ago</Tooltip>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col3)}>Life</div>\n                    <div className={names(styles.logTableCol, styles.col4)}>\n                        <Tag intent=\"warning\">Wanging</Tag>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col5)}>i'm to much angry today.</div>\n                </div>\n                <div className={styles.logTableRow}>\n                    <div className={names(styles.logTableCol, styles.col1)}>2</div>\n                    <div className={names(styles.logTableCol, styles.col2)}>\n                        <Tooltip content=\"2020.01.11 12:50\">2018-12-21</Tooltip>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col3)}>Daily Work</div>\n                    <div className={names(styles.logTableCol, styles.col4)}>\n                        <Tag intent=\"danger\">Danger</Tag>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col5)}>display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;display: flex;\n    justify-content: center;</div>\n                </div>\n                <div className={styles.logTableRow}>\n                    <div className={names(styles.logTableCol, styles.col1)}>3</div>\n                    <div className={names(styles.logTableCol, styles.col2)}>\n                        <Tooltip content=\"2020.01.11 12:50\">1990.04.08</Tooltip>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col3)}>Habits</div>\n                    <div className={names(styles.logTableCol, styles.col4)}>\n                        <Tag intent=\"info\">Info</Tag>\n                    </div>\n                    <div className={names(styles.logTableCol, styles.col5)}>i'm to much angry today.</div>\n                </div>\n            </div>\n            <div className={styles.logTableFoot}></div>\n        </div>\n    );\n}","import React from 'react';\n// import \"antd/dist/antd.css\";\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\n\n// import AppFrame from \"./component/appFrame\";\n// import DataTable from './component/dataTable';\n// import Category from './component/category';\n\nimport LogTable from './component/logTable';\n\nfunction App() {\n  return (\n    <LogTable />\n    // <AppFrame\n    //   side={<Category />}\n    //   footer={<span>稍等片刻，正在加载...</span>}\n    // >\n    //   <DataTable />\n    // </AppFrame>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}