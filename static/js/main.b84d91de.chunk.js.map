{"version":3,"sources":["component/logAppender/index.module.css","component/logItem/index.module.css","page/index.js","page/appender.module.css","page/demo.module.css","page sync nonrecursive //.js$","App.js","serviceWorker.js","index.js","component/logAppender/index.js","page/appender.js","component/logItem/index.js","page/demo.js","store/index.js"],"names":["module","exports","routes","pageCtx","require","keys","forEach","key","route","push","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","Object","resolve","App","className","style","margin","width","onClick","window","location","href","pages","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","useState","value","setValue","styles","container","onChange","evt","target","textarea","buttonWrap","store","logMessages","add","time","Date","content","catch","err","alert","message","handleSubmit","component","path","names","date","datetime","locale","children","setLogMessages","useEffect","a","orderBy","toArray","list","reverse","fetch","db","Dexie","version","stores"],"mappings":"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","file":"static/js/main.b84d91de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"logAppender_textarea__2gBDQ\",\"container\":\"logAppender_container__33MaX\",\"buttonWrap\":\"logAppender_buttonWrap__3bQie\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"logItem_container__1HQ_G\",\"content\":\"logItem_content__1UPLb\",\"date\":\"logItem_date__1GU1d\"};","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst routes = [];\nconst pageCtx = require.context('.', false, /\\.js$/);\n\npageCtx.keys().forEach(key => {\n    if (key === './index.js') return;\n    const route = pageCtx(key);\n    routes.push(<Route {...route} key={key} />);\n});\n\nexport default routes;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"appender_container__TAWgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"demo_container__3HD1h\"};","var map = {\n\t\"./appender.js\": 49,\n\t\"./demo.js\": 50,\n\t\"./index.js\": 14\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 36;","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport pages from './page';\nimport 'normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\n\nfunction App() {\n  return (\n    <Router>\n      <nav className=\"bp3-navbar\">\n        <div style={{ margin: '0 auto', width: '694px' }}>\n          <div className=\"bp3-navbar-group bp3-align-left\">\n            <div className=\"bp3-navbar-heading\">日志</div>\n          </div>\n          <div className=\"bp3-navbar-group bp3-align-right\">\n            <button className=\"bp3-button\" onClick={() => window.location.href = '#/log.create'}>创建</button>\n          </div>\n        </div>\n      </nav>\n      {pages}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport styles from './index.module.css';\nimport store from 'store';\n\nfunction handleSubmit(value) {\n    store.logMessages.add({\n        time: new Date(),\n        content: value\n    }).then(() => {\n        window.location.href = '#/log.list';\n    }).catch(err => {\n        alert(err.message);\n    })\n}\n\nexport default function(props) {\n    const [value, setValue] = useState('');\n    return (\n        <div className={styles.container}>\n            <textarea value={value} onChange={evt => setValue(evt.target.value)} className={styles.textarea}></textarea>\n            <div className={styles.buttonWrap}>\n                <button onClick={() => handleSubmit(value)}>提交</button>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport styles from './appender.module.css';\nimport LogAppender from 'component/logAppender';\n\nfunction Appender() {\n    return (\n        <div className={styles.container}>\n            <LogAppender />\n        </div>\n    );\n}\n\nexport const component = Appender;\nexport const path = '/log.create';","import React from 'react';\nimport TimeAgo from 'timeago-react';\nimport styles from './index.module.css';\nimport names from 'classnames';\n\nexport default function(props) {\n    return (\n        <div className={names(styles.container)}>\n            <div className={styles.content}>\n                <small className={styles.date}><TimeAgo datetime={props.date} locale='zh_CN' /></small> &nbsp;\n                <span>{props.children}</span>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport store from 'store/index';\nimport styles from './demo.module.css';\nimport LogItem from 'component/logItem';\n\nfunction Demo() {\n    const [logMessages, setLogMessages] = useState([]);\n    useEffect(() => {\n        async function fetch() {\n            const list = await store.logMessages.orderBy('time').toArray();\n            setLogMessages(list.reverse());\n        }\n        fetch();\n    }, []);\n    return (\n        <div className={styles.container}>\n            { logMessages.map(message => (\n                <LogItem key={message.id} date={message.date}>{message.content}</LogItem>\n            ))}\n        </div>\n    );\n}\n\nexport const component = Demo;\nexport const path = '/log.list';","import Dexie from 'dexie';\n\nconst db = new Dexie('EfficientDatabase');\n\ndb.version(2).stores({\n    logMessages: '++id, content, time'\n});\n\nexport default db;"],"sourceRoot":""}