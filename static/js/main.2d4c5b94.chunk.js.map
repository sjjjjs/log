{"version":3,"sources":["component/appFrame/index.module.css","component/appFrame/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","minWidth","maxWidth","WebAppFrame","props","useState","sideWidth","setSideWidth","resizeActive","setResizeActive","offset","setOffset","className","styles","frame","onMouseUp","onMouseMove","evt","diff","screenX","width","header","content","side","style","sideMain","sideBar","onMouseDown","main","children","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,OAAS,yBAAyB,QAAU,0BAA0B,KAAO,uBAAuB,KAAO,uBAAuB,SAAW,2BAA2B,QAAU,0BAA0B,OAAS,2B,wKCEjQC,EAAW,IACXC,EAAW,IAEF,SAASC,EAAYC,GAAQ,IAAD,EACHC,mBAAS,KADN,mBAC/BC,EAD+B,KACpBC,EADoB,OAEGF,oBAAS,GAFZ,mBAE/BG,EAF+B,KAEjBC,EAFiB,OAGTJ,mBAAS,GAHA,mBAG/BK,EAH+B,KAGvBC,EAHuB,KAIvC,OACI,yBACIC,UAAWC,IAAOC,MAClBC,UAAW,WACPJ,EAAU,GACVF,GAAgB,IAEpBO,YAAa,SAAAC,GACT,GAAKT,EAAL,CACA,IAAMU,EAAOD,EAAIE,QAAUT,EACvBU,EAAQd,EAAYY,EACpBE,EAAQlB,IAAUkB,EAAQlB,GAC1BkB,EAAQnB,IAAUmB,EAAQnB,GAC9BM,EAAaa,GACbT,EAAUM,EAAIE,YAGlB,yBAAKP,UAAWC,IAAOQ,QAASjB,EAAMiB,QACtC,yBAAKT,UAAWC,IAAOS,SACnB,yBAAKV,UAAWC,IAAOU,KAAMC,MAAO,CAAEJ,MAAOd,IACzC,yBAAKM,UAAWC,IAAOY,UAClBrB,EAAMmB,MAEX,yBACIX,UAAWC,IAAOa,QAClBC,YAAa,SAAAV,GACTR,GAAgB,GAChBE,EAAUM,EAAIE,aAI1B,yBAAKP,UAAWC,IAAOe,MAAOxB,EAAMyB,WAExC,yBAAKjB,UAAWC,IAAOiB,QAAS1B,EAAM0B,SC9BnCC,MARf,WACE,OACE,kBAAC,EAAD,iBCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2d4c5b94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"appFrame_frame__mQbRV\",\"header\":\"appFrame_header__VXnlL\",\"content\":\"appFrame_content__1rM9z\",\"main\":\"appFrame_main__1Uw8l\",\"side\":\"appFrame_side__31v6P\",\"sideMain\":\"appFrame_sideMain__1nNvY\",\"sideBar\":\"appFrame_sideBar__2vuoL\",\"footer\":\"appFrame_footer__PUQHy\"};","import React, { useState } from \"react\";\nimport styles from \"./index.module.css\";\n\nconst minWidth = 150;\nconst maxWidth = 600;\n\nexport default function WebAppFrame(props) {\n    const [ sideWidth, setSideWidth ] = useState(300);\n    const [ resizeActive, setResizeActive ] = useState(false);\n    const [ offset, setOffset ] = useState(0);\n    return (\n        <div\n            className={styles.frame}\n            onMouseUp={() => {\n                setOffset(0);\n                setResizeActive(false); \n            }}\n            onMouseMove={evt => {\n                if (!resizeActive) return;\n                const diff = evt.screenX - offset;\n                let width = sideWidth + diff;\n                if (width > maxWidth) width = maxWidth;\n                if (width < minWidth) width = minWidth;\n                setSideWidth(width);\n                setOffset(evt.screenX);  \n            }}\n        >\n            <div className={styles.header}>{props.header}</div>\n            <div className={styles.content}>\n                <div className={styles.side} style={{ width: sideWidth }}>\n                    <div className={styles.sideMain}>\n                        {props.side}\n                    </div>\n                    <div\n                        className={styles.sideBar}\n                        onMouseDown={evt => {\n                            setResizeActive(true);\n                            setOffset(evt.screenX); \n                        }}\n                    ></div>\n                </div>\n                <div className={styles.main}>{props.children}</div>\n            </div>\n            <div className={styles.footer}>{props.footer}</div>\n        </div>\n    );\n}\n","import React from 'react';\nimport \"antd/dist/antd.css\";\n\nimport AppFrame from \"./component/appFrame\";\n\nfunction App() {\n  return (\n    <AppFrame>\n      content\n    </AppFrame>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}